package itmviewer.ui;

import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import itmviewer.state.ITMSettingsState;
import org.apache.commons.lang.math.NumberUtils;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.LinkedHashSet;
import java.util.Set;

public class ITMViewerSettings implements Configurable {
    public static final String ITM_VIEWER_SETTINGS_NAME = "ITM Viewer Settings";
    private JLabel tclHost;
    private JTextField tclHostInput;
    private JTextField tclPortInput;
    private JLabel tclPort;
    private JSpinner errorChannel;
    private JSpinner debugChannel;
    private JSpinner infoChannel;
    private JSpinner warnChannel;
    private JPanel root;
    SpinnerNumberModel error_model = new SpinnerNumberModel(3, 0, 31, 1);
    SpinnerNumberModel warn_model = new SpinnerNumberModel(2, 0, 31, 1);
    SpinnerNumberModel info_model = new SpinnerNumberModel(1, 0, 31, 1);
    SpinnerNumberModel debug_model = new SpinnerNumberModel(0, 0, 31, 1);

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.setBorder(BorderFactory.createTitledBorder("ITM Viewer Settings"));
        tclHost = new JLabel();
        tclHost.setText("OpenOCD Tcl Host");
        root.add(tclHost, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tclHostInput = new JTextField();
        tclHostInput.setText("127.0.0.1");
        root.add(tclHostInput, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tclPort = new JLabel();
        tclPort.setText("OpenOcd Tcl Port");
        root.add(tclPort, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(114, 30), null, 0, false));
        tclPortInput = new JTextField();
        tclPortInput.setText("6666");
        root.add(tclPortInput, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("ITM Error Channel");
        root.add(label1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorChannel = new JSpinner();
        root.add(errorChannel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("ITM Debug Channel");
        root.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        debugChannel = new JSpinner();
        root.add(debugChannel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("ITM Info Channel");
        root.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        infoChannel = new JSpinner();
        root.add(infoChannel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("ITM Warn Channel");
        root.add(label4, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        warnChannel = new JSpinner();
        root.add(warnChannel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        root.add(spacer1, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    @Override
    public @Nls(capitalization = Nls.Capitalization.Title) String getDisplayName() {
        return ITM_VIEWER_SETTINGS_NAME;
    }

    @Override
    public @Nullable JComponent createComponent() {
        int debugLogLevelPort = ITMSettingsState.getLogLevelPort(ITMSettingsState.LOGGING_LEVEL.DEBUG);
        int infoLogLevelPort = ITMSettingsState.getLogLevelPort(ITMSettingsState.LOGGING_LEVEL.INFO);
        int warnLogLevelPort = ITMSettingsState.getLogLevelPort(ITMSettingsState.LOGGING_LEVEL.WARN);
        int errorLogLevelPort = ITMSettingsState.getLogLevelPort(ITMSettingsState.LOGGING_LEVEL.ERROR);

        debug_model.setValue(debugLogLevelPort);
        info_model.setValue(infoLogLevelPort);
        warn_model.setValue(warnLogLevelPort);
        error_model.setValue(errorLogLevelPort);

        errorChannel.setModel(error_model);
        warnChannel.setModel(warn_model);
        infoChannel.setModel(info_model);
        debugChannel.setModel(debug_model);

        String savedHost = ITMSettingsState.getTclHost();
        if (savedHost != null) {
            tclHostInput.setText(savedHost);
        }
        String savedPort = ITMSettingsState.getTclPort();
        if (savedPort != null) {
            tclPortInput.setText(savedPort);
        }
        return root;
    }

    @Override
    public boolean isModified() {
        //TODO: dont be lazy and check if something checked
        return true;
    }

    @Override
    public void apply() throws ConfigurationException {
        String tclHostVal = tclHostInput.getText();
        ITMSettingsState.setTclHost(tclHostVal);
        Integer debugPort = (Integer) debug_model.getValue();
        Integer infoPort = (Integer) info_model.getValue();
        Integer warnPort = (Integer) warn_model.getValue();
        Integer errorPort = (Integer) error_model.getValue();

        Set<Integer> channels = new LinkedHashSet<>();
        channels.add(errorPort);
        channels.add(warnPort);
        channels.add(infoPort);
        channels.add(debugPort);

        if (channels.size() != 4) {
            throw new ConfigurationException("Please provide different ports for each log level");
        }
        if (tclHostInput.getText() == null || tclHostInput.getText().length() == 0) {
            throw new ConfigurationException("Host is invalid");
        }
        if (tclPortInput.getText() == null
                || tclPortInput.getText().length() == 0
                || !NumberUtils.isNumber(tclPortInput.getText())) {
            throw new ConfigurationException("Port is invalid");
        }

        ITMSettingsState.setChannelPort(ITMSettingsState.LOGGING_LEVEL.DEBUG, debugPort);
        ITMSettingsState.setChannelPort(ITMSettingsState.LOGGING_LEVEL.INFO, infoPort);
        ITMSettingsState.setChannelPort(ITMSettingsState.LOGGING_LEVEL.WARN, warnPort);
        ITMSettingsState.setChannelPort(ITMSettingsState.LOGGING_LEVEL.ERROR, errorPort);
        ITMSettingsState.setTclHost(tclHostInput.getText());
        ITMSettingsState.setTclPort(tclPortInput.getText());


    }
}
